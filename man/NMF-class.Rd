% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NMF-class.R
\docType{class}
\name{NMF-class}
\alias{NMF-class}
\alias{misc}
\alias{$,NMF-method}
\alias{$<-,NMF-method}
\alias{.DollarNames,NMF-method}
\title{Generic Interface for Nonnegative Matrix Factorisation Models}
\usage{
misc(object, ...)

\S4method{$}{NMF}(x, name)

\S4method{$}{NMF}(x, name) <- value

\S4method{.DollarNames}{NMF}(x, pattern = "")
}
\arguments{
\item{object}{an object that inherit from class \code{NMF}}

\item{...}{extra arguments (not used)}
}
\description{
The class \code{NMF} is a \emph{virtual class} that defines a common
interface to handle Nonnegative Matrix Factorization models (NMF models)
in a generic way.
Provided a minimum set of generic methods is implemented by concrete
model classes, these benefit from a whole set of functions and utilities
to perform common computations and tasks in the context of Nonnegative Matrix
Factorization.

The function \code{misc} provides access to miscellaneous data members stored
in slot \code{misc} (as a \code{list}), which allow extensions of NMF models
to be implemented, without defining a new S4 class.

shortcut for \code{x@misc[[name, exact=TRUE]]} respectively.

shortcut for \code{x@misc[[name]] <- value}

Auto-completion for \code{\linkS4class{NMF}} objects
}
\details{
Class \code{NMF} makes it easy to develop new models that integrate well
into the general framework implemented by the \emph{NMF} package.

Following a few simple guidelines, new types of NMF models benefit from all the
functionalities available for the built-in NMF models -- that derive themselves
from class \code{NMF}.
See section \emph{Implementing NMF models} below.

See \code{\linkS4class{NMFstd}}, and references and links therein for
details on the built-in implementations of the standard NMF model and its
extensions.
}
\section{Slots}{

\describe{
\item{\code{misc}}{A list that is used internally to temporarily store algorithm
parameters during the computation.}
}}

\section{Implementing NMF models}{


The class \code{NMF} only defines a basic data/low-level interface for NMF models, as
a collection of generic methods, responsible with data handling, upon which
relies a comprehensive set of functions, composing a rich higher-level interface.

Actual NMF models are defined as sub-classes that inherits from class
\code{NMF}, and implement the management of data storage, providing
definitions for the interface's pure virtual methods.

The minimum requirement to define a new NMF model that integrates into
the framework of the \emph{NMF} package are the followings:

\itemize{

\item Define a class that inherits from class \code{NMF} and implements the
new model, say class \code{myNMF}.

\item Implement the following S4 methods for the new class \code{myNMF}:
    \describe{
    \item{fitted}{\code{signature(object = "myNMF", value = "matrix")}:
    Must return the estimated target matrix as fitted by the NMF model
    \code{object}.
    }
    \item{basis}{\code{signature(object = "myNMF")}:
    Must return the basis matrix(e.g. the first matrix factor in
    the standard NMF model).
    }
    \item{basis<-}{\code{signature(object = "myNMF", value = "matrix")}:
    Must return \code{object} with the basis matrix set to
    \code{value}.
    }
    \item{coef}{\code{signature(object = "myNMF")}:
    Must return the matrix of mixture coefficients (e.g. the second matrix
    factor in the standard NMF model).
    }
    \item{coef<-}{\code{signature(object = "myNMF", value = "matrix")}:
    Must return \code{object} with the matrix of mixture coefficients set to
    \code{value}.
    }
    }

	The \emph{NMF} package provides "pure virtual" definitions of these
 methods for class \code{NMF} (i.e. with signatures \code{(object='NMF', ...)}
 and \code{(object='NMF', value='matrix')}) that throw an error if called, so
 as to force their definition for model classes.

\item Optionally, implement method \code{rnmf}(signature(x="myNMF", target="ANY")).
This method should call \code{callNextMethod(x=x, target=target, ...)} and
fill the returned NMF model with its specific data suitable random values.
}

For concrete examples of NMF models implementations, see class
\code{\linkS4class{NMFstd}} and its extensions (e.g. classes
\code{\linkS4class{NMFOffset}} or \code{\linkS4class{NMFns}}).
}

\section{Creating NMF objects}{

Strictly speaking, because class \code{NMF} is virtual, no object of class
\code{NMF} can be instantiated, only objects from its sub-classes.
However, those objects are sometimes shortly referred in the documentation and
vignettes as "\code{NMF} objects" instead of "objects that inherits from
class \code{NMF}".

For built-in models or for models that inherit from the standard model class
\code{\linkS4class{NMFstd}}, the factory method \code{nmfModel} enables to easily create
valid \code{NMF} objects in a variety of common situations.
See documentation for the the factory method \code{\link{nmfModel}} for
more details.
}

\examples{

# show all the NMF models available (i.e. the classes that inherit from class NMF)
nmfModels()
# show all the built-in NMF models available
nmfModels(builtin.only=TRUE)

# class NMF is a virtual class so cannot be instantiated:
try( new('NMF') )

# To instantiate an NMF model, use the factory method nmfModel. see ?nmfModel
nmfModel()
nmfModel(3)
nmfModel(3, model='NMFns')

}
\references{
Definition of Nonnegative Matrix Factorization in its modern formulation: \cite{Lee1999}

Historical first definition and algorithms: \cite{Paatero1994}
}
\seealso{
Main interface to perform NMF in \code{\link{nmf-methods}}.

Built-in NMF models and factory method in \code{\link{nmfModel}}.

Method \code{\link{seed}} to set NMF objects with values suitable to start
algorithms with.

Other NMF-interface: \code{\link{basis}},
  \code{\link{nmfModel}}, \code{\link{rnmf}}
}
