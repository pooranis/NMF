% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NMFstd-class.R
\docType{class}
\name{NMFstd-class}
\alias{NMFstd-class}
\title{NMF Model - Standard model}
\description{
This class implements the standard model of Nonnegative Matrix
Factorization.
It provides a general structure and generic functions to manage
factorizations that follow the standard NMF model, as defined by 
\cite{Lee2001}.
}
\details{
Let \eqn{V} be a \eqn{n \times m} non-negative matrix and \eqn{r} a positive
integer.  In its standard form (see references below), a NMF of \eqn{V} is
commonly defined as a pair of matrices \eqn{(W, H)} such that:

\deqn{V \equiv W H,}

where: 
\itemize{ 
\item \eqn{W} and \eqn{H} are \eqn{n \times r} and \eqn{r
\times m} matrices respectively with non-negative entries; 
\item \eqn{\equiv} is to be understood with respect to some loss function.  
Common choices of loss functions are based on Frobenius norm or Kullback-Leibler
divergence.  
}

Integer \eqn{r} is called the \emph{factorization rank}.  
Depending on the context of application of NMF, the columns of \eqn{W} 
and \eqn{H} are given different names: 
\describe{ 
\item{columns of \code{W}}{basis vector, metagenes, factors, source, image basis}
\item{columns of \code{H}}{mixture coefficients, metagene sample expression profiles, weights}
\item{rows of \code{H}}{basis profiles, metagene expression profiles}
}

NMF approaches have been successfully applied to several fields. 
The package NMF was implemented trying to use names as generic as possible 
for objects and methods.

The following terminology is used: 
\describe{ 
\item{samples}{the columns of the target matrix \eqn{V}} 
\item{features}{the rows of the target matrix \eqn{V}}
\item{basis matrix}{the first matrix factor \eqn{W}}
\item{basis vectors}{the columns of first matrix factor \eqn{W}}
\item{mixture matrix}{the second matrix factor \eqn{H}} \item{mixtures
coefficients}{the columns of second matrix factor \eqn{H}} 
}

However, because the package NMF was primarily implemented to work with gene
expression microarray data, it also provides a layer to easily and
intuitively work with objects from the Bioconductor base framework.  
See \link{bioc-NMF} for more details.
}
\section{Slots}{

\describe{
\item{\code{W}}{A \code{matrix} that contains the basis matrix, i.e. the \emph{first} 
matrix factor of the factorisation}

\item{\code{H}}{A \code{matrix} that contains the coefficient matrix, i.e. the 
\emph{second} matrix factor of the factorisation}

\item{\code{bterms}}{a \code{data.frame} that contains the primary data that 
define fixed basis terms. See \code{\link{bterms}}.}

\item{\code{ibterms}}{integer vector that contains the indexes of the basis components
that are fixed, i.e. for which only the coefficient are estimated.

IMPORTANT: This slot is set on construction of an NMF model via 
\code{\link[=nmfModel,formula,ANY-method]{nmfModel}} and is not recommended to 
not be subsequently changed by the end-user.}

\item{\code{cterms}}{a \code{data.frame} that contains the primary data that 
define fixed coefficient terms. See \code{\link{cterms}}.}

\item{\code{icterms}}{integer vector that contains the indexes of the basis components
that have fixed coefficients, i.e. for which only the basis vectors are estimated.

IMPORTANT: This slot is set on construction of an NMF model via 
\code{\link[=nmfModel,formula,ANY-method]{nmfModel}} and is not recommended to 
not be subsequently changed by the end-user.}
}}

\examples{
# create a completely empty NMFstd object
new('NMFstd')

# create a NMF object based on one random matrix: the missing matrix is deduced
# Note this only works when using factory method NMF 
n <- 50; r <- 3; 
w <- rmatrix(n, r) 
nmfModel(W=w)

# create a NMF object based on random (compatible) matrices
p <- 20
h <- rmatrix(r, p)
nmfModel(W=w, H=h)

# create a NMF object based on incompatible matrices: generate an error
h <- rmatrix(r+1, p)
try( new('NMFstd', W=w, H=h) )
try( nmfModel(w, h) )

# Giving target dimensions to the factory method allow for coping with dimension
# incompatibilty (a warning is thrown in such case) 
nmfModel(r, W=w, H=h)
 
# create a NMF array object based on random (compatible) arrays
# extra dimension (levels)
q <- 2 
w <- array(seq(n*r*q), dim = c(n, r, q))
h <- rmatrix(r, p)
nmfModel(W = w, H = h)

}
\seealso{
Other NMF-model: \code{\link{NMFOffset-class}},
  \code{\link{NMFns-class}}
}
